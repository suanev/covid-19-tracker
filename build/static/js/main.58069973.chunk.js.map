{"version":3,"sources":["utils/config.js","utils/index.js","components/InfoBox/index.js","components/Map/index.js","components/Table/index.js","components/LineGraph/options.js","components/LineGraph/index.js","App.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sort","a","b","InfoBox","title","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","index","key","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","LineGraph","api","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","borderColor","backgroundColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","onCountryChange","event","countryCode","target","sortedData","getCountries","FormControl","Select","variant","onChange","MenuItem","iso3","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58069973.chunk.js","sourcesContent":["const casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        multiplier: 2000,\n    },\n};\n\nexport default casesTypeColors;","import React from 'react';\nimport numeral from 'numeral';\nimport casesTypeColors from './config';\nimport { Circle, Popup } from 'react-leaflet';\n\nexport const prettyPrintStat = (stat) =>\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const sortData = data => {\n    const sortedData = [...data];\n\n    return sortedData.sort((a, b) => (a.cases > b.cases) ? -1 : 1);\n};\n\nexport const showDataOnMap = (data, casesType = \"cases\") => (\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div\n                        className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                    ></div>\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n);","import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\nimport './styles.scss';\n\nconst InfoBox = ({ title, cases, total, active, isRed, ...props }) => {\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"\n            }`}>\n            <CardContent>\n                <Typography color=\"textSecondary\" className=\"infoBox__title\" gutterBottom>{title}</Typography>\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n                <Typography color=\"textSecondary\" className=\"infoBox__total\">{total} Total</Typography>\n            </CardContent>\n        </Card>\n\n    );\n}\n\nexport default InfoBox;","import React from 'react';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport { showDataOnMap } from '../../utils';\n\nimport './styles.scss';\n\nconst Map = ({ countries, casesType, center, zoom }) => {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\n                    {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map;\n","import React from 'react';\nimport numeral from \"numeral\";\n\nimport './styles.scss';\n\nconst Table = ({ countries }) => (\n    <div className=\"table\" >\n        <table>\n            <tbody>\n                {countries.map(({ country, cases }, index) => (\n                    <tr key={index}>\n                        <td>{country}</td>\n                        <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    </div>\n);\n\nexport default Table;\n","import numeral from \"numeral\";\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\n  export default options;","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport options from \"./options\";\n\nconst LineGraph = ({ api, casesType, ...props}) => {\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(`${api}/historical/all?lastdays=120`)\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType, api]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                data: data,\n                borderColor: \"#CC1034\",\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from '@material-ui/core';\nimport numeral from 'numeral';\nimport { prettyPrintStat, sortData } from './utils';\n\nimport InfoBox from './components/InfoBox';\nimport Map from './components/Map';\nimport Table from './components/Table';\nimport LineGraph from './components/LineGraph';\n\nimport \"leaflet/dist/leaflet.css\";\nimport './App.scss';\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  const api = `https://disease.sh/v3/covid-19`;\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = (countryCode === 'worldwide')\n      ? `all`\n      : `countries/${countryCode}`;\n\n    await fetch(`${api}/${url}`)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\n        setMapZoom(4);\n      })\n  }\n\n  useEffect(() => {\n    const getCountries = async () => {\n      await fetch(`${api}/countries`)\n        .then(response => response.json())\n        .then(data => {\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(data);\n        });\n    };\n    getCountries();\n  }, [api]);\n\n  useEffect(() => {\n    fetch(`${api}/all`)\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n  }, [api]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\" key=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country, index) => (\n                <MenuItem value={country.countryInfo.iso3} key={index}>{country.country}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            title=\"Coronavirus cases\"\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType(\"cases\")}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")} />\n          <InfoBox\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType(\"recovered\")}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")} />\n          <InfoBox\n            isRed\n            title=\"Deaths\"\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType(\"deaths\")}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")} />\n        </div>\n\n        <Map countries={countries} casesType={casesType} center={mapCenter} zoom={mapZoom} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" api={api} casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}